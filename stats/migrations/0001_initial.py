# Generated by Django 5.1.2 on 2024-10-27 18:06

import django.contrib.postgres.fields
import django.db.models.deletion
import django.db.models.expressions
import django.db.models.functions.comparison
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('player', '0053_alter_summoner__id_alter_summoner_created_date_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='SummonerChampion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('champion_key', models.CharField(max_length=32)),
                ('major', models.PositiveSmallIntegerField()),
                ('minor', models.PositiveSmallIntegerField()),
                ('queue', models.IntegerField()),
                ('game_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), default=list, size=None)),
                ('kills', models.IntegerField(default=0)),
                ('deaths', models.IntegerField(default=0)),
                ('assists', models.IntegerField(default=0)),
                ('damage_to_champions', models.IntegerField(default=0)),
                ('damage_to_objectives', models.IntegerField(default=0)),
                ('damage_to_turrets', models.IntegerField(default=0)),
                ('damage_taken', models.IntegerField(default=0)),
                ('damage_mitigated', models.IntegerField(default=0)),
                ('vision_score', models.IntegerField(default=0)),
                ('total_seconds', models.IntegerField(default=0)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('vspm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('vision_score'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0, output_field=models.FloatField())), '*', models.Value(60.0)), output_field=models.FloatField())),
                ('dpm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('damage_to_champions'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0)), '*', models.Value(60.0)), output_field=models.FloatField())),
                ('kda', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('kills'), '+', models.F('assists')), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('deaths', models.FloatField()), 1.0)), output_field=models.FloatField())),
                ('dtpm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('damage_taken'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0)), '*', models.Value(60.0)), help_text='damage taken per minute', output_field=models.FloatField())),
                ('dttpm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('damage_to_turrets'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0)), '*', models.Value(60.0)), help_text='damage to turrets per minute', output_field=models.FloatField())),
                ('dtopm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('damage_to_objectives'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0)), '*', models.Value(60.0)), help_text='damage to objectives per minute', output_field=models.FloatField())),
                ('dmpm', models.GeneratedField(db_persist=True, expression=django.db.models.expressions.CombinedExpression(django.db.models.expressions.CombinedExpression(models.F('damage_taken'), '/', django.db.models.functions.comparison.Greatest(django.db.models.functions.comparison.Cast('total_seconds', models.FloatField()), 1.0)), '*', models.Value(60.0)), help_text='damage mitigated per minute', output_field=models.FloatField())),
                ('summoner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='player.summoner')),
            ],
        ),
        migrations.CreateModel(
            name='SummonerChampionAgainst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('champion_key', models.CharField(max_length=32)),
                ('wins', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('game_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), default=list, size=None)),
                ('summoner_champion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stats.summonerchampion')),
            ],
        ),
        migrations.AddConstraint(
            model_name='summonerchampion',
            constraint=models.UniqueConstraint(fields=('summoner', 'champion_key', 'major', 'minor', 'queue'), name='stats_summonerchampion_summoner_champion_version_unique'),
        ),
        migrations.AddConstraint(
            model_name='summonerchampionagainst',
            constraint=models.UniqueConstraint(fields=('summoner_champion', 'champion_key'), name='stats_summonerchampionagainst_summoner_champion_champion_unique'),
        ),
    ]
